/*
 * Copyright (c) 2025 GeyserMC. http://geysermc.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @author GeyserMC
 * @link https://github.com/GeyserMC/GeyserDiscordBot
 */

package org.geysermc.discordbot.listeners;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.components.actionrow.ActionRow;
import net.dv8tion.jda.api.components.buttons.Button;
import net.dv8tion.jda.api.components.container.Container;
import net.dv8tion.jda.api.components.separator.Separator;
import net.dv8tion.jda.api.components.textdisplay.TextDisplay;
import net.dv8tion.jda.api.components.textinput.TextInput;
import net.dv8tion.jda.api.components.textinput.TextInputStyle;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import net.dv8tion.jda.api.entities.channel.concrete.ThreadChannel;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.modals.Modal;
import org.geysermc.discordbot.storage.ServerSettings;
import org.geysermc.discordbot.util.BotColors;
import org.jetbrains.annotations.NotNull;

public class ExploitHandler extends ListenerAdapter {
    @Override
    public void onButtonInteraction(@NotNull ButtonInteractionEvent event) {
        if (!event.getComponentId().equals("exploit_report")) return;
        Modal.Builder reportModal = Modal.create(
            "exploit_report_modal",
            "Report an exploit"
        );

        reportModal.addComponents(ActionRow.of(
            TextInput.create("exploit_title", "Title", TextInputStyle.SHORT)
                .setRequired(true)
                .setMaxLength(100)
                .build()
        ));

        reportModal.addComponents(ActionRow.of(
            TextInput.create("exploit_description", "Description", TextInputStyle.PARAGRAPH)
                .setRequired(true)
                .setMaxLength(2000)
                .build()
        ));

        event.replyModal(reportModal.build()).queue();
    }

    @Override
    public void onModalInteraction(@NotNull ModalInteractionEvent event) {
        if (!event.getModalId().equals("exploit_report_modal")) return;

        String title = event.getValue("exploit_title").getAsString();
        String description = event.getValue("exploit_description").getAsString();

        // Create a thread for the exploit report
        ThreadChannel reportThread = event.getChannel().asTextChannel().createThreadChannel(title, true).complete();

        if (reportThread == null) {
            event.replyEmbeds(new EmbedBuilder()
                    .setTitle("Error")
                    .setDescription("Failed to create a thread for the exploit report. Please try again later.")
                    .setColor(BotColors.FAILURE.getColor())
                    .build()).setEphemeral(true).queue();
            return;
        }

        reportThread.sendMessageEmbeds(new EmbedBuilder()
                .setTitle(title)
                .setDescription(description)
                .setAuthor(event.getUser().getName(), null, event.getUser().getAvatarUrl())
                .setColor(BotColors.SUCCESS.getColor())
                .build()).queue();

        reportThread.addThreadMember(event.getUser()).queue();

        TextChannel reportNotifyChannel = ServerSettings.getExploitReportsNotifyChannel(event.getGuild());
        if (reportNotifyChannel != null) {
            reportNotifyChannel.sendMessageComponents(Container.of(
                            TextDisplay.of("## New Exploit Report"),
                            TextDisplay.of("A new exploit report has been created. Please review it and take necessary actions."),
                            Separator.createDivider(Separator.Spacing.SMALL),
                            TextDisplay.of("**Reporter:** " + event.getUser().getName()),
                            TextDisplay.of("**Title:** " + title),
                            TextDisplay.of("**Description:**\n" + description),
                            Separator.createDivider(Separator.Spacing.SMALL),
                            ActionRow.of(Button.link(reportThread.getJumpUrl(), "Go to thread"))
                    ).withAccentColor(BotColors.SUCCESS.getColor()))
                    .useComponentsV2()
                    .queue();
        }

        event.replyComponents(Container.of(
                        TextDisplay.of("## Exploit Report Created"),
                        TextDisplay.of("Your exploit report has been successfully created."),
                        TextDisplay.of("Thank you for helping us improve Geyser!"),
                        Separator.createDivider(Separator.Spacing.SMALL),
                        ActionRow.of(Button.link(reportThread.getJumpUrl(), "Go to thread"))
                ).withAccentColor(BotColors.SUCCESS.getColor()))
                .setEphemeral(true)
                .useComponentsV2()
                .queue();
    }
}
